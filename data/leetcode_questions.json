[
    {
        "id": 1,
        "title": "Two Sum",
        "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to the target.",
        "function_signature": "def two_sum(nums, target):",
        "examples": [
            {
                "input": "nums = [2, 7, 11, 15], target = 9",
                "output": "[0, 1]"
            },
            {
                "input": "nums = [3, 2, 4], target = 6",
                "output": "[1, 2]"
            }
        ]
    },
    {
        "id": 2,
        "title": "Reverse String",
        "description": "Write a function that reverses a string.",
        "function_signature": "def reverse_string(s):",
        "examples": [
            {
                "input": "s = 'hello'",
                "output": "'olleh'"
            },
            {
                "input": "s = 'Python'",
                "output": "'nohtyP'"
            }
        ]
    },
    {
        "id": 3,
        "title": "Palindrome Check",
        "description": "Determine if a string is a palindrome. A palindrome reads the same backward as forward.",
        "function_signature": "def is_palindrome(s):",
        "examples": [
            {
                "input": "s = 'madam'",
                "output": "True"
            },
            {
                "input": "s = 'hello'",
                "output": "False"
            }
        ]
    },
    {
        "id": 4,
        "title": "Merge Two Sorted Lists",
        "description": "Merge two sorted linked lists into one sorted list.",
        "function_signature": "def merge_two_lists(l1, l2):",
        "examples": [
            {
                "input": "l1 = [1, 2, 4], l2 = [1, 3, 4]",
                "output": "[1, 1, 2, 3, 4, 4]"
            },
            {
                "input": "l1 = [], l2 = []",
                "output": "[]"
            }
        ]
    },
    {
        "id": 5,
        "title": "Maximum Subarray",
        "description": "Find the contiguous subarray with the largest sum.",
        "function_signature": "def max_subarray(nums):",
        "examples": [
            {
                "input": "nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]",
                "output": "6"
            },
            {
                "input": "nums = [1]",
                "output": "1"
            }
        ]
    },
    {
        "id": 6,
        "title": "Climbing Stairs",
        "description": "You are climbing a staircase. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
        "function_signature": "def climb_stairs(n):",
        "examples": [
            {
                "input": "n = 2",
                "output": "2"
            },
            {
                "input": "n = 3",
                "output": "3"
            }
        ]
    },
    {
        "id": 7,
        "title": "Valid Parentheses",
        "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
        "function_signature": "def is_valid(s):",
        "examples": [
            {
                "input": "s = '()'",
                "output": "True"
            },
            {
                "input": "s = '([)]'",
                "output": "False"
            }
        ]
    },
    {
        "id": 8,
        "title": "Search Insert Position",
        "description": "Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.",
        "function_signature": "def search_insert(nums, target):",
        "examples": [
            {
                "input": "nums = [1, 3, 5, 6], target = 5",
                "output": "2"
            },
            {
                "input": "nums = [1, 3, 5, 6], target = 2",
                "output": "1"
            }
        ]
    },
    {
        "id": 9,
        "title": "Longest Common Prefix",
        "description": "Write a function to find the longest common prefix string amongst an array of strings.",
        "function_signature": "def longest_common_prefix(strs):",
        "examples": [
            {
                "input": "strs = ['flower', 'flow', 'flight']",
                "output": "'fl'"
            },
            {
                "input": "strs = ['dog', 'racecar', 'car']",
                "output": "''"
            }
        ]
    },
    {
        "id": 10,
        "title": "Remove Duplicates from Sorted Array",
        "description": "Remove duplicates in-place such that each element appears only once and return the new length.",
        "function_signature": "def remove_duplicates(nums):",
        "examples": [
            {
                "input": "nums = [1, 1, 2]",
                "output": "2"
            },
            {
                "input": "nums = [0, 0, 1, 1, 2, 3, 3, 4]",
                "output": "5"
            }
        ]
    },
    {
        "id": 11,
        "title": "Roman to Integer",
        "description": "Convert a Roman numeral to an integer.",
        "function_signature": "def roman_to_int(s):",
        "examples": [
            {
                "input": "s = 'III'",
                "output": "3"
            },
            {
                "input": "s = 'IX'",
                "output": "9"
            }
        ]
    },
    {
        "id": 12,
        "title": "Integer to Roman",
        "description": "Convert an integer to a Roman numeral.",
        "function_signature": "def int_to_roman(num):",
        "examples": [
            {
                "input": "num = 3",
                "output": "'III'"
            },
            {
                "input": "num = 58",
                "output": "'LVIII'"
            }
        ]
    },
    {
        "id": 13,
        "title": "Container With Most Water",
        "description": "Find two lines that together with the x-axis form a container such that it contains the most water.",
        "function_signature": "def max_area(height):",
        "examples": [
            {
                "input": "height = [1, 8, 6, 2, 5, 4, 8, 3, 7]",
                "output": "49"
            },
            {
                "input": "height = [1, 1]",
                "output": "1"
            }
        ]
    },

        {
        "id": 14,
        "title": "Find Median from Data Stream",
        "description": "Design a data structure that supports adding numbers and finding the median in efficient time.",
        "function_signature": "class MedianFinder:",
        "examples": [
            {
                "input": "add_num(1), add_num(2), find_median()",
                "output": "1.5"
            },
            {
                "input": "add_num(3), find_median()",
                "output": "2.0"
            }
        ]
    },
    {
        "id": 15,
        "title": "Longest Palindromic Substring",
        "description": "Given a string s, return the longest palindromic substring in s.",
        "function_signature": "def longest_palindrome(s):",
        "examples": [
            {
                "input": "s = 'babad'",
                "output": "'bab' or 'aba'"
            },
            {
                "input": "s = 'cbbd'",
                "output": "'bb'"
            }
        ]
    },
    {
        "id": 16,
        "title": "3Sum",
        "description": "Given an integer array nums, find all unique triplets that sum up to zero.",
        "function_signature": "def three_sum(nums):",
        "examples": [
            {
                "input": "nums = [-1, 0, 1, 2, -1, -4]",
                "output": "[[-1, -1, 2], [-1, 0, 1]]"
            },
            {
                "input": "nums = []",
                "output": "[]"
            }
        ]
    },
    {
        "id": 17,
        "title": "Letter Combinations of a Phone Number",
        "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations.",
        "function_signature": "def letter_combinations(digits):",
        "examples": [
            {
                "input": "digits = '23'",
                "output": "['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']"
            },
            {
                "input": "digits = ''",
                "output": "[]"
            }
        ]
    },
    {
        "id": 18,
        "title": "Generate Parentheses",
        "description": "Given n pairs of parentheses, generate all valid combinations of well-formed parentheses.",
        "function_signature": "def generate_parenthesis(n):",
        "examples": [
            {
                "input": "n = 3",
                "output": "['((()))', '(()())', '(())()', '()(())', '()()()']"
            },
            {
                "input": "n = 1",
                "output": "['()']"
            }
        ]
    },
    {
        "id": 19,
        "title": "Merge Intervals",
        "description": "Given an array of intervals, merge all overlapping intervals.",
        "function_signature": "def merge(intervals):",
        "examples": [
            {
                "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
                "output": "[[1,6],[8,10],[15,18]]"
            },
            {
                "input": "intervals = [[1,4],[4,5]]",
                "output": "[[1,5]]"
            }
        ]
    },
    {
        "id": 20,
        "title": "Unique Paths",
        "description": "A robot is located at the top-left corner of a grid. Find the number of unique paths to reach the bottom-right corner.",
        "function_signature": "def unique_paths(m, n):",
        "examples": [
            {
                "input": "m = 3, n = 7",
                "output": "28"
            },
            {
                "input": "m = 3, n = 2",
                "output": "3"
            }
        ]
    },
    {
        "id": 21,
        "title": "Minimum Path Sum",
        "description": "Given a grid filled with non-negative numbers, find a path from top-left to bottom-right with the minimum sum.",
        "function_signature": "def min_path_sum(grid):",
        "examples": [
            {
                "input": "grid = [[1,3,1],[1,5,1],[4,2,1]]",
                "output": "7"
            },
            {
                "input": "grid = [[1,2,3],[4,5,6]]",
                "output": "12"
            }
        ]
    },
    {
        "id": 22,
        "title": "Word Search",
        "description": "Given a grid and a word, determine if the word exists in the grid.",
        "function_signature": "def exist(board, word):",
        "examples": [
            {
                "input": "board = [['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word = 'ABCCED'",
                "output": "True"
            },
            {
                "input": "board = [['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word = 'SEE'",
                "output": "True"
            }
        ]
    },
    {
        "id": 23,
        "title": "Combination Sum",
        "description": "Given an array of distinct integers, return all unique combinations that sum up to a target.",
        "function_signature": "def combination_sum(candidates, target):",
        "examples": [
            {
                "input": "candidates = [2,3,6,7], target = 7",
                "output": "[[2,2,3],[7]]"
            },
            {
                "input": "candidates = [2,3,5], target = 8",
                "output": "[[2,2,2,2],[2,3,3],[3,5]]"
            }
        ]
    },
    {
        "id": 24,
        "title": "Permutations",
        "description": "Given a collection of distinct numbers, return all possible permutations.",
        "function_signature": "def permute(nums):",
        "examples": [
            {
                "input": "nums = [1,2,3]",
                "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"
            },
            {
                "input": "nums = [0,1]",
                "output": "[[0,1],[1,0]]"
            }
        ]
    },
    {
        "id": 25,
        "title": "Rotate Image",
        "description": "Given an n x n 2D matrix, rotate it 90 degrees clockwise.",
        "function_signature": "def rotate(matrix):",
        "examples": [
            {
                "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
                "output": "[[7,4,1],[8,5,2],[9,6,3]]"
            },
            {
                "input": "matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
                "output": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]"
            }
        ]
    },
    {
        "id": 26,
        "title": "Group Anagrams",
        "description": "Given an array of strings, group anagrams together.",
        "function_signature": "def group_anagrams(strs):",
        "examples": [
            {
                "input": "strs = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat']",
                "output": "[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]"
            },
            {
                "input": "strs = ['']",
                "output": "[['']]"
            }
        ]
    },
    {
        "id": 27,
        "title": "Pow(x, n)",
        "description": "Implement pow(x, n), which calculates x raised to the power n.",
        "function_signature": "def my_pow(x, n):",
        "examples": [
            {
                "input": "x = 2.00000, n = 10",
                "output": "1024.00000"
            },
            {
                "input": "x = 2.10000, n = 3",
                "output": "9.26100"
            }
        ]
    },
    {
        "id": 28,
        "title": "Multiply Strings",
        "description": "Given two non-negative integers num1 and num2 represented as strings, return the product.",
        "function_signature": "def multiply(num1, num2):",
        "examples": [
            {
                "input": "num1 = '2', num2 = '3'",
                "output": "'6'"
            },
            {
                "input": "num1 = '123', num2 = '456'",
                "output": "'56088'"
            }
        ]
    },
    {
        "id": 29,
        "title": "Spiral Matrix",
        "description": "Given a matrix, return all elements in spiral order.",
        "function_signature": "def spiral_order(matrix):",
        "examples": [
            {
                "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
                "output": "[1,2,3,6,9,8,7,4,5]"
            },
            {
                "input": "matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]",
                "output": "[1,2,3,4,8,12,11,10,9,5,6,7]"
            }
        ]
    },
    {
        "id": 30,
        "title": "Jump Game",
        "description": "Given an array of non-negative integers, determine if you can reach the last index.",
        "function_signature": "def can_jump(nums):",
        "examples": [
            {
                "input": "nums = [2,3,1,1,4]",
                "output": "True"
            },
            {
                "input": "nums = [3,2,1,0,4]",
                "output": "False"
            }
        ]
    },
    {
        "id": 31,
        "title": "Set Matrix Zeroes",
        "description": "Given a matrix, if an element is 0, set its entire row and column to 0.",
        "function_signature": "def set_zeroes(matrix):",
        "examples": [
            {
                "input": "matrix = [[1,1,1],[1,0,1],[1,1,1]]",
                "output": "[[1,0,1],[0,0,0],[1,0,1]]"
            },
            {
                "input": "matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
                "output": "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]"
            }
        ]
    }

]
